# This is a basic workflow to help you get started with Actions

name: Example

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      
      - name: Print Git Refs
        run: echo ${{ github.head_ref }}
             echo ${{ github.base_ref }}
  # coverage:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: test
  #       run: make test

  # references:
  #   runs-on: ubuntu
  #   steps:
  #     - name: Get Previous Successful Run ID
  #       id: get-run-id
  #       run: |
  #         CURRENT_RUN_ID=${{ github.run_id }}
  #         RESPONSE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #                                     -H "Accept: application/vnd.github.v3+json" \
  #                                     "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=success")

  #         PREVIOUS_SUCCESSFUL_RUN_ID=$(echo $RESPONSE | jq --arg name "${{github.workflow}}" \
  #                                                       --argjson exclude_id $CURRENT_RUN_ID --arg branch "${{github.event.pull_request.head.ref}}" '
  #                                                       .workflow_runs
  #                                                       | map(select(.name == $name and .id != $exclude_id and .head_branch == $branch))
  #                                                       | max_by(.run_started_at)
  #                                                       | .id' 
  #                                                     )

  #         echo "Previous successful run ID is $PREVIOUS_SUCCESSFUL_RUN_ID"
  #         echo "previous_run_id=$PREVIOUS_SUCCESSFUL_RUN_ID" >> $GITHUB_OUTPUT